<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XMLUtils</name>
    </assembly>
    <members>
        <member name="T:XMLUtils.CXMLUtils">
            <summary>
            Abstracts the DocumentFormat.OpenXml spreadsheet controls.
            </summary>
        </member>
        <member name="M:XMLUtils.CXMLUtils.AddNextRow(DocumentFormat.OpenXml.Spreadsheet.SheetData,System.UInt32)">
            <summary>
            Adds a Row to the end of the collection of Rows
            </summary>
            <param name="sheetData">SheetData to add to</param>
            <param name="index">Index of the new Row. NOTE: MUST be greater than all previous RowIndexes.</param>
            <returns>The newly added Row</returns>
        </member>
        <member name="M:XMLUtils.CXMLUtils.AddRow(DocumentFormat.OpenXml.Spreadsheet.SheetData,System.UInt32)">
            <summary>
            Creates a new Row and appends it to the passed SheetData collection.
            </summary>
            <param name="sheetData">SheetData collection to add to</param>
            <param name="index">Index of the new Row</param>
            <returns>The new Row</returns>
        </member>
        <member name="M:XMLUtils.CXMLUtils.AddSheet(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument,DocumentFormat.OpenXml.Packaging.WorksheetPart,System.String)">
            <summary>
            Creates a new Sheet and registers it with the Sheets collection.
            NOTE: a new Sheet needs a NEW WorksheetPart.
            </summary>
            <param name="sd">SpreadsheetDocument to add to</param>
            <param name="wsp">NEW WorksheetPart to tie to</param>
            <param name="name">Name of the new Sheet</param>
            <returns>The Sheet called name</returns>
        </member>
        <member name="M:XMLUtils.CXMLUtils.AddWorksheetPart(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument)">
            <summary>
            Creates, initializes, and returns a WorksheetPart for the passed
            SpreadsheetDocument.
            </summary>
            <param name="sd">SpreadsheetDocument to add to</param>
            <returns>New WorksheetPart</returns>
        </member>
        <member name="M:XMLUtils.CXMLUtils.CreateWorksheet(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument,System.String)">
            <summary>
            Creates the necessary Parts for a working Worksheet, then returns the
            WorksheetPart of the new Worksheet.
            </summary>
            <param name="sd">SpreadsheetDocument to add to</param>
            <param name="strSheetName">Name of the new Worksheet</param>
            <returns>WorksheetPart of the new Worksheet</returns>
        </member>
        <member name="M:XMLUtils.CXMLUtils.CellNewAlignment(DocumentFormat.OpenXml.Spreadsheet.Stylesheet,DocumentFormat.OpenXml.UInt32Value,DocumentFormat.OpenXml.Spreadsheet.HorizontalAlignmentValues,DocumentFormat.OpenXml.Spreadsheet.VerticalAlignmentValues)">
            <summary>
            Gives the passed Cell a new alignment value.
            </summary>
            <param name="styleSheet">Stylesheet to update</param>
            <param name="styleIndex">Index of Style to adjust</param>
            <param name="horAlignment">HorizontalAlignment to apply</param>
            <param name="vertAlignment">VerticalAlignment to apply</param>
        </member>
        <member name="M:XMLUtils.CXMLUtils.CreateBorder(DocumentFormat.OpenXml.Spreadsheet.Stylesheet,DocumentFormat.OpenXml.Spreadsheet.Color,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a Border style.
            </summary>
            <param name="styleSheet">Stylesheet to add to</param>
            <param name="color">Border color</param>
            <param name="top">Whether to apply a border to the top</param>
            <param name="bottom">Whether to apply a border to the bottom</param>
            <param name="right">Whether to apply a border to the right side</param>
            <param name="left">Whether to apply a border to the left side</param>
            <returns>The StyleIndex of the new Border style</returns>
        </member>
        <member name="M:XMLUtils.CXMLUtils.CreateFill(DocumentFormat.OpenXml.Spreadsheet.Stylesheet,DocumentFormat.OpenXml.Spreadsheet.ForegroundColor)">
            <summary>
            Creates a new Fill from the passed Color, and adds it to the passed
            Stylesheet.
            </summary>
            <param name="styleSheet">Stylesheet to add the new Fill to</param>
            <param name="fillColor">Color of the new Fill</param>
            <returns>Index of the new Fill</returns>
        </member>
        <member name="M:XMLUtils.CXMLUtils.CreateFont(DocumentFormat.OpenXml.Spreadsheet.Stylesheet,System.String,System.Double,System.Boolean,DocumentFormat.OpenXml.Spreadsheet.Color)">
            <summary>
            Creates a new Font from the passed information, and adds it to the
            passed Stylesheet.
            </summary>
            <param name="styleSheet">Stylesheet to add the new Font to</param>
            <param name="fontName">Name of the font to use</param>
            <param name="fontSize">Size of the Font</param>
            <param name="isBold">Bold boolean</param>
            <param name="textColor">Color of the text</param>
            <returns>Index of the new Font</returns>
        </member>
        <member name="M:XMLUtils.CXMLUtils.CreateCellFormat(DocumentFormat.OpenXml.Spreadsheet.Stylesheet,DocumentFormat.OpenXml.UInt32Value,DocumentFormat.OpenXml.UInt32Value,DocumentFormat.OpenXml.UInt32Value,DocumentFormat.OpenXml.UInt32Value)">
            <summary>
            Creates a CellFormat from the passed Font, Fill, and Format indices,
            and adds it to the passed Stylesheet.
            </summary>
            <param name="styleSheet">Stylesheet to add the new CellFormat to</param>
            <param name="fontIndex">Index of the Font to use</param>
            <param name="fillIndex">Index of the Fill to use</param>
            <param name="borderIndex">Index of the Border to use</param>
            <param name="numberFormatId">Index of the Format to use</param>
            <returns>Index of the new CellFormat</returns>
        </member>
        <member name="M:XMLUtils.CXMLUtils.MergeCells(DocumentFormat.OpenXml.Packaging.WorksheetPart,System.String,System.String,System.String,DocumentFormat.OpenXml.Spreadsheet.CellValues,DocumentFormat.OpenXml.UInt32Value)">
            <summary>
            Merges all Cells on the given range. Initializes to strContent and
            cellFormat.
            </summary>
            <param name="wsp">WorksheetPart to use</param>
            <param name="TopLeftRef">Reference to top-left Cell</param>
            <param name="BottomRightRef">Reference to bottom-right Cell</param>
            <param name="strContent">Content to add to the new Cell</param>
            <param name="dataType">Type of data stored in the merged Cell</param>
            <param name="cellFormat">Format for the new Cell</param>
        </member>
        <member name="M:XMLUtils.CXMLUtils.CreateNumberingFormat(DocumentFormat.OpenXml.Spreadsheet.Stylesheet,System.String)">
            <summary>
            Creates a NumberingFormat from the passed information and adds it to
            the passed StyleSheet.
            </summary>
            <param name="styleSheet">StyleSheet to add to</param>
            <param name="format">Format code to use</param>
            <returns>NumberingFormatId</returns>
        </member>
        <member name="M:XMLUtils.CXMLUtils.ExtractColName(System.String)">
            <summary>
            Gets the column name from the cell location.
            </summary>
            <param name="cellReference">CellReference value</param>
            <returns>Column number</returns>
        </member>
        <member name="M:XMLUtils.CXMLUtils.ExtractColNum(System.String)">
            <summary>
            Gets the column number from the cell location.
            </summary>
            <param name="cellReference">CellReference value</param>
            <returns>Column number</returns>
        </member>
        <member name="M:XMLUtils.CXMLUtils.ExtractRowNum(System.String)">
            <summary>
            Gets the row number from the cell location.
            </summary>
            <param name="cellReference">CellReference value</param>
            <returns>Row number</returns>
        </member>
        <member name="M:XMLUtils.CXMLUtils.ToColName(System.Int32)">
            <summary>
            Calculates the column name for the nth column, where n=intNumber.
            NOTE: Returns the empty string, if n is invalid.
            </summary>
            <param name="intNumber">Column number</param>
            <returns>Column name</returns>
        </member>
        <member name="M:XMLUtils.CXMLUtils.CustomColumnWidth(DocumentFormat.OpenXml.Spreadsheet.Columns,System.Int32,System.Double)">
            <summary>
            Creates a custom column width for the given column.
            NOTE: This MUST be done in order, and column ranges MUST NOT overlap.
            </summary>
            <param name="columns">Collection of Columns to add to</param>
            <param name="Col">Column to apply custom width to</param>
            <param name="colWidth">Multiple of 7 pixels to apply as width of the columns in the given range</param>
            <returns>If inputs are not valid, returns false. Does not currently check for pre-existing column width entries</returns>
        </member>
        <member name="M:XMLUtils.CXMLUtils.CustomColumnWidthOverRange(DocumentFormat.OpenXml.Spreadsheet.Columns,System.Int32,System.Int32,System.Double)">
            <summary>
            Creates a custom column width for all the columns in the given range.
            If firstCol == lastCol, only one column's width will change.
            NOTE: This MUST be done in order, and column ranges MUST NOT overlap.
            </summary>
            <param name="columns">Collection of Columns to add to</param>
            <param name="firstCol">First column in the range</param>
            <param name="lastCol">Last column in the range</param>
            <param name="colWidth">Multiple of 7 pixels to apply as width of the columns in the given range</param>
            <returns>If inputs are not valid, returns false. Does not currently check for pre-existing column widths</returns>
        </member>
        <member name="M:XMLUtils.CXMLUtils.GetCellByRef(DocumentFormat.OpenXml.Spreadsheet.Row,System.String)">
            <summary>
            Gets the Cell that has CellReference of strCellRef. If the Cell does
            not already exist, one is initialized at that location.
            </summary>
            <param name="row">Row that should contain the desired Cell</param>
            <param name="strCellRef">Refernce to look for</param>
            <returns>Cell at the passed reference</returns>
        </member>
        <member name="M:XMLUtils.CXMLUtils.GetRowCells(DocumentFormat.OpenXml.Spreadsheet.Row,System.Int32)">
            <summary>
            Gets the Cells for the given Row.
            </summary>
            <param name="row">Row of Cells</param>
            <param name="colCount">Max number of Cells to return</param>
            <returns>List of Cells</returns>
        </member>
        <member name="M:XMLUtils.CXMLUtils.GetCellData(DocumentFormat.OpenXml.Spreadsheet.Cell,DocumentFormat.OpenXml.Spreadsheet.SharedStringTable)">
            <summary>
            Gets the data from the Cell.
            </summary>
            <param name="cell">Cell to pull data from</param>
            <param name="sharedTable">SharedStringTable for interpreting metadata</param>
            <returns>Data stored in the Cell</returns>
        </member>
        <member name="M:XMLUtils.CXMLUtils.GetColumnsElement(DocumentFormat.OpenXml.Packaging.WorksheetPart)">
            <summary>
            Gets the Columns element for this Sheet.
            </summary>
            <param name="wsp">WorksheetPart to add to</param>
            <returns>The new Columns element</returns>
        </member>
        <member name="M:XMLUtils.CXMLUtils.GetSheetData(DocumentFormat.OpenXml.Packaging.WorksheetPart)">
            <summary>
            Gets the SheetData for the passed WorksheetPart. Creates it, if one
            does not already exist.
            </summary>
            <param name="wsp">WorksheetPart to pull from</param>
            <returns>SheetData</returns>
        </member>
        <member name="M:XMLUtils.CXMLUtils.GetSheets(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument)">
            <summary>
            Returns the Sheets collection for the passed SpreadsheetDocument.
            If no Sheets collection exists, an empty one is created and returned.
            </summary>
            <param name="sd">SpreadsheetDocument to pull from</param>
            <returns>Sheets collection</returns>
        </member>
        <member name="M:XMLUtils.CXMLUtils.GetColumnCount(DocumentFormat.OpenXml.Packaging.WorksheetPart)">
            <summary>
            Counts the column headers. 
            </summary>
            <param name="wsp">WorksheetPart to count on</param>
            <returns>Number of columns</returns>
        </member>
        <member name="M:XMLUtils.CXMLUtils.GetRowCount(DocumentFormat.OpenXml.Packaging.WorksheetPart)">
            <summary>
            Counts the column headers. 
            </summary>
            <param name="wsp">WorksheetPart to count on</param>
            <returns>Number of columns</returns>
        </member>
        <member name="M:XMLUtils.CXMLUtils.GetSharedStringTable(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument)">
            <summary>
            Gets the SharedStringTablePart for the passed WorkbookPart.
            Creates one, if one does not exist.
            NOTE: Cells that contain strings actually just hold a key to the
            SharedStringTable, which is shared by the whole document.
            </summary>
            <param name="sd">SpreadsheetDocument to pull from</param>
            <returns>SharedStringTablePart of the document</returns>
        </member>
        <member name="M:XMLUtils.CXMLUtils.GetStylesheet(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument)">
            <summary>
            Gets the Stylesheet for the passed SpreadsheetDocument.
            </summary>
            <param name="sd">SpreadsheetDocument to pull from</param>
            <returns>Stylesheet</returns>
        </member>
        <member name="M:XMLUtils.CXMLUtils.GetWorkbookPart(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument)">
            <summary>
            Gets the WorkbookPart for the passed SpreadsheetDocument.
            </summary>
            <param name="sd">SpreadsheetDocument</param>
            <returns>WorkbookPart</returns>
        </member>
        <member name="M:XMLUtils.CXMLUtils.GetWorksheetPart(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument,DocumentFormat.OpenXml.Spreadsheet.Sheet)">
            <summary>
            Gets the Worksheet part for the passed Sheet.
            </summary>
            <param name="sd">SpreadsheetDocument that contains the WorksheetPart</param>
            <param name="sheet">Sheet that the WorksheetPart will reference</param>
            <returns>WorksheetPart</returns>
        </member>
        <member name="M:XMLUtils.CXMLUtils.GetAllContentRows(DocumentFormat.OpenXml.Packaging.WorksheetPart)">
            <summary>
            Gets all the Content Rows of the passed WorksheetPart.
            NOTE: Content Rows are rows that contain any values, excluding the Row
            of column headers.
            </summary>
            <param name="wsp"></param>
            <returns></returns>
        </member>
        <member name="M:XMLUtils.CXMLUtils.GetAllRows(DocumentFormat.OpenXml.Packaging.WorksheetPart)">
            <summary>
            Gets all the rows in the Worksheet associated with the passed
            WorksheetPart.
            </summary>
            <param name="wsp">WorksheetPart to pull from</param>
            <returns>List of all Rows</returns>
        </member>
        <member name="M:XMLUtils.CXMLUtils.GetRowByRowNumber(DocumentFormat.OpenXml.Packaging.WorksheetPart,System.UInt32)">
            <summary>
            Returns the specified Row.
            </summary>
            <param name="wsp">WorksheetPart to pull from</param>
            <param name="RowNumber">Number of the desired Row</param>
            <returns>Row</returns>
        </member>
        <member name="M:XMLUtils.CXMLUtils.GetRowsInRange(DocumentFormat.OpenXml.Packaging.WorksheetPart,System.Int32,System.Int32)">
            <summary>
            Gets all the Rows in the given range. Adds new ones, if any in the
            range do not exist.
            </summary>
            <param name="wsp">WorksheetPart to pull from</param>
            <param name="firstIndex">Index of the first Row</param>
            <param name="lastIndex">Index of the last Row</param>
            <returns>Array of Rows. NOTE: rowIndex - firstIndex == arrayIndex</returns>
        </member>
        <member name="M:XMLUtils.CXMLUtils.ReadRowByRowNumber(DocumentFormat.OpenXml.Packaging.WorksheetPart,System.UInt32)">
            <summary>
            Returns the specified Row to be read.
            </summary>
            <param name="wsp">WorksheetPart to pull from</param>
            <param name="RowNumber">Number of the desired Row</param>
            <returns>Row</returns>
        </member>
        <member name="M:XMLUtils.CXMLUtils.GetRowData(DocumentFormat.OpenXml.Spreadsheet.Row,DocumentFormat.OpenXml.Spreadsheet.SharedStringTable,System.Int32)">
            <summary>
            Gets the data from the Row, up to column # colCount.
            </summary>
            <param name="row">Row to pull from</param>
            <param name="ssTable">SharedStringTable to pull from</param>
            <param name="colCount">Column number of last column to use</param>
            <returns>Array of string data</returns>
        </member>
        <member name="M:XMLUtils.CXMLUtils.GetAllWorksheets(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument)">
            <summary>
            Gets a List of all Worksheets in the passed SpreadsheetDocument.
            </summary>
            <param name="sd">SpreadsheetDocument to pull from</param>
            <returns>List of all Worksheets</returns>
        </member>
        <member name="M:XMLUtils.CXMLUtils.GetFirstSheet(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument)">
            <summary>
            Gets the first sheet of the passed WorkbookPart.
            </summary>
            <param name="sd">SpreadsheetDocument to pull from</param>
            <returns>First sheet of the Document. NULL, if there are none.</returns>
        </member>
        <member name="M:XMLUtils.CXMLUtils.GetSheetByName(DocumentFormat.OpenXml.Spreadsheet.Sheets,System.String)">
            <summary>
            Returns the Sheet, in sheets, whose name is strName.
            </summary>
            <param name="sheets">Sheets collection to look in</param>
            <param name="strName">Name to the desired Sheet</param>
            <returns>Sheet whose name is strName</returns>
        </member>
        <member name="M:XMLUtils.CXMLUtils.InsertJaggedArray2D(DocumentFormat.OpenXml.Packaging.WorksheetPart,System.Int32,System.Int32,System.String[][],System.Collections.Generic.IEnumerable{System.Int32},DocumentFormat.OpenXml.UInt32Value)">
            <summary>
            Inserts a Jagged 2D Array into the Worksheet.
            </summary>
            <param name="wsp">WorksheetPart to add to</param>
            <param name="firstRow">Top row of the entry</param>
            <param name="firstColumn">Leftmost column of the entry</param>
            <param name="arrData">2-Dimensional jagged string array of data</param>
            <param name="numericColumns">Columns that should be stored as Numbers, rather than text</param>
            <param name="cellFormat">Format to apply to each cell</param>
        </member>
        <member name="M:XMLUtils.CXMLUtils.InsertDataCell(DocumentFormat.OpenXml.Spreadsheet.Row,System.String,System.String,DocumentFormat.OpenXml.Spreadsheet.CellValues,DocumentFormat.OpenXml.UInt32Value)">
            <summary>
            Inserts a single cell of data at the specified location.
            Overwrites existing Cell, if one exists at the passed CellReference.
            </summary>
            <param name="row">Row to insert into</param>
            <param name="strCellRef">CellReference of the new Cell</param>
            <param name="strData">Data string</param>
            <param name="type">CellValues enum of data type</param>
            <param name="cellFormat">CellFormat</param>
        </member>
        <member name="M:XMLUtils.CXMLUtils.InsertDataColumn(DocumentFormat.OpenXml.Packaging.WorksheetPart,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String},System.Boolean,DocumentFormat.OpenXml.UInt32Value)">
            <summary>
            Inserts a column of data into the passed WorksheetPart.
            </summary>
            <param name="wsp">WorksheetPart to add to</param>
            <param name="topRow">Top Row to add to the column</param>
            <param name="column">Column to add to</param>
            <param name="lstData">Data to insert</param>
            <param name="isNumeric">True if List items are to be stored as Numbers</param>
            <param name="cellFormat">Format for the new Cells</param>
        </member>
        <member name="M:XMLUtils.CXMLUtils.InsertRowArray(DocumentFormat.OpenXml.Packaging.WorksheetPart)">
            <summary>
            Inserts the Array of Rows into the given Worksheet.
            </summary>
            <param name="wsp">WorksheetPart to add to</param>
        </member>
        <member name="M:XMLUtils.CXMLUtils.InsertRowData(DocumentFormat.OpenXml.Spreadsheet.Row,System.Int32,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Int32},DocumentFormat.OpenXml.UInt32Value)">
            <summary>
            Inserts/updates the data from the passed List of strings into the
            passed Row, using the passed CellFormat.
            </summary>
            <param name="row">Row to insert data into</param>
            <param name="column">Column of the Cell to insert/update</param>
            <param name="data">List of data to insert</param>
            <param name="numericColumns">List if column numbers of columns with numeric values</param>
            <param name="cellFormat">Format of each cell in THIS Row</param>
        </member>
        <member name="M:XMLUtils.CXMLUtils.InsertFormulaCell(DocumentFormat.OpenXml.Spreadsheet.Row,System.String,System.String,DocumentFormat.OpenXml.UInt32Value)">
            <summary>
            Inserts one formula cell into the given row, with the given formula.
            </summary>
            <param name="row">Row to insert Formula Cell into</param>
            <param name="strCellRef">Reference to new Cell</param>
            <param name="strFormula">Formula to put into new Cell</param>
            <param name="cellFormat">CellFormat for the new Cell</param>
        </member>
        <member name="M:XMLUtils.CXMLUtils.InsertFormulaColumn(DocumentFormat.OpenXml.Packaging.WorksheetPart,System.Int32,System.Int32,System.Int32,System.String,DocumentFormat.OpenXml.UInt32Value)">
            <summary>
            Inserts the passed fomula into the given range of Rows on the passed
            Column.
            </summary>
            <param name="wsp">WorksheetPart that contains the Rows needed</param>
            <param name="iTopRow">RowIndex of the first Row</param>
            <param name="iColumn">Column number of the column to add to</param>
            <param name="numToApply">Number of Cells that require the formula</param>
            <param name="strFormula">Formula to use</param>
            <param name="cellFormat">Format for the new Cells</param>
        </member>
        <member name="M:XMLUtils.CXMLUtils.InsertFormulaRow(DocumentFormat.OpenXml.Packaging.WorksheetPart,System.Int32,System.Int32,System.Int32,System.String,DocumentFormat.OpenXml.UInt32Value)">
            <summary>
            Inserts the passed formula into each Cell in the given range for the
            passed Row.
            </summary>
            <param name="wsp">WorksheetPart to add to</param>
            <param name="rowIndex">Index of the Row to add to</param>
            <param name="firstColumn">Column to start with</param>
            <param name="numColumns">Number of cells to apply the formula to</param>
            <param name="strFormula">The fomula to apply to the Master Cell</param>
            <param name="cellFormat">Format of the Cells</param>
        </member>
        <member name="M:XMLUtils.CXMLUtils.InsertSharedFormulaCell(DocumentFormat.OpenXml.Packaging.WorksheetPart,System.Int32,System.Int32,System.String,System.String,DocumentFormat.OpenXml.UInt32Value)">
            <summary>
            Creates a Cell to carry a shared formula.
            </summary>
            <param name="wsp">WorksheetPart to add to</param>
            <param name="firstRow">Index of the Row that owns the Cell</param>
            <param name="firstColumn">Column of the first Cell</param>
            <param name="strFormula">The shared formula. NULL if this is not the Master Cell.</param>
            <param name="strReference">CellReference of the Cell. NULL if this is not the Master Cell.</param>
            <param name="cellFormat">Format of the Cell</param>
        </member>
        <member name="M:XMLUtils.CXMLUtils.InsertSharedStringItem(DocumentFormat.OpenXml.Packaging.SharedStringTablePart,System.String)">
            <summary>
            Inserts the passed string into the SharedStringTable
            </summary>
            <param name="sstp">SharedStringTablePart to add to</param>
            <param name="str">String to add</param>
            <returns>Index of the string</returns>
        </member>
        <member name="M:XMLUtils.CXMLUtils.CloseDocument(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument)">
            <summary>
            Save and Close the Document.
            </summary>
            <param name="sd">Document to close</param>
        </member>
        <member name="M:XMLUtils.CXMLUtils.GetEditableDocument(System.String)">
            <summary>
            Gets the SpreadsheetDocument, located at the passed full filename, as
            an editable document.
            </summary>
            <param name="fullFileName">Full filename</param>
            <returns>Editable SpreadsheetDocument</returns>
        </member>
        <member name="M:XMLUtils.CXMLUtils.GetNewDocument(System.String)">
            <summary>
            Creates a new SpreadsheetDocument at the given file name and location.
            </summary>
            <param name="strFullFileName">Filename with path</param>
            <returns>The new Document</returns>
        </member>
        <member name="M:XMLUtils.CXMLUtils.GetReadOnlyDocument(System.String)">
            <summary>
            Gets the SpreadsheetDocument at the passed filename with no editing
            rights.
            </summary>
            <param name="fullFileName">Full filename</param>
            <returns>SpreadsheetDocument</returns>
        </member>
    </members>
</doc>
